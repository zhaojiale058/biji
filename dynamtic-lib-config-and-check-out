/*****************************************************************************************/
使用动态库的两种办法
/*****************************************************************************************/
方法一：
include 头文件  
直接调用动态库的函数
编译的时候类似：
    gcc -L 路径 -lpthread
/**************************************/
demo： gcc -o hello hello.c -I /home/hello/include -L /home/hello/lib -lworld
/*-大i  表示 头文件目录*/
-L /home/hello/lib表示将/home/hello/lib目录作为第一个寻找库文件的目录
   寻找的顺序是：/home/hello/lib-->/lib-->/usr/lib-->.......
 -lworld表示在上面的lib的路径中寻找libworld.so动态库文件
/**************************************/
g++  -g -lGL -lX11 testvbo.cpp -o testvbo
这种方法的动态库可以ldd来查看
loongson@loongson-pc:~/zhangletest/testvbo$  g++  -g -lGL -lX11 testvbo.cpp -o testvbo
loongson@loongson-pc:~/zhangletest/testvbo$ ldd testvbo
	linux-vdso.so.1 (0x000000fffd848000)
	libGL.so.1 => /lib/loongarch64-linux-gnu/tls/loongarch/libGL.so.1 (0x000000fff74d4000)
	libX11.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libX11.so.6 (0x000000fff7390000)
	libstdc++.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libstdc++.so.6 (0x000000fff71d8000)
	libm.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libm.so.6 (0x000000fff711c000)
	libgcc_s.so.1 => /lib/loongarch64-linux-gnu/tls/loongarch/libgcc_s.so.1 (0x000000fff70d0000)
	libc.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libc.so.6 (0x000000fff6f64000)
	libGLX.so.0 => /lib/loongarch64-linux-gnu/tls/loongarch/libGLX.so.0 (0x000000fff6f44000)
	libGLdispatch.so.0 => /lib/loongarch64-linux-gnu/tls/loongarch/libGLdispatch.so.0 (0x000000fff6e6c000)
	libdl.so.2 => /lib/loongarch64-linux-gnu/tls/loongarch/libdl.so.2 (0x000000fff6e60000)
	libpthread.so.0 => /lib/loongarch64-linux-gnu/tls/loongarch/libpthread.so.0 (0x000000fff6e38000)
	/lib64/ld.so.1 (0x000000fff7589c58)
	libxcb.so.1 => /lib/loongarch64-linux-gnu/tls/loongarch/libxcb.so.1 (0x000000fff6e0c000)
	libXext.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libXext.so.6 (0x000000fff6df0000)
	libXau.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libXau.so.6 (0x000000fff6de4000)
	libXdmcp.so.6 => /lib/loongarch64-linux-gnu/tls/loongarch/libXdmcp.so.6 (0x000000fff6dd4000)
	libbsd.so.0 => /lib/loongarch64-linux-gnu/tls/loongarch/libbsd.so.0 (0x000000fff6db4000)
	librt.so.1 => /lib/loongarch64-linux-gnu/tls/loongarch/librt.so.1 (0x000000fff6da4000)
linux-vdso.so.1 (0x000000fffd848000)  这个是内核提供的，没有文件路径
/lib64/ld.so.1 (0x000000fff7589c58) 绝对路径，不需要寻找。
其余的就是按照 -L 路径 -> 环境变量LD_LIBRARY_PATH -> /lib-->/usr/lib-->....... 这种来寻找的。
从这个顺序，如果-L 指定的目录下面有文件，我们得删除这个目录下的，才能让加载我们配置的动态库
/*****************************************************************************************/
第二种使用动态库的办法
1.handle_ = dlopen(libName, RTLD_NOW | RTLD_NODELETE);
2.dlsym 寻找
3 dlclose
dlopen如果不是绝对的路径，也是
 环境变量LD_LIBRARY_PATH -> /lib-->/usr/lib-->....... 这种来寻找的

如果是绝对路径，就得想想办法了。
/*****************************************************************************************/
如何检查
1  gdb  info sharedlibrary 看当时使用的库的路径
或者 /proc/下面

2 ldd 只能看 程序启动的时候so，不能看到dlopen的
/*****************************************************************************************/
在linux系统中，如果程序需要加载动态库，
它会按照一定的顺序（优先级）去查找:
/*或者编译的时候链接静态库*/


优先级      	路径
1	            编译时指定链接的动态库的路径  /*可以查看*/.
2	            环境变量LD_LIBRARY_PATH所指定的路径
3	            /etc/ld.so.conf文件中指定的路径，修改后运行ldconfig命令生效
4	            系统默认动态库路径：/lib/
5	            系统默认动态库路径：/usr/lib/

环境变量LIBRARY_PATH可以指定编译时搜索动态库的路径；
环境变量LD_LIBRARY_PATH可以指定程序运行时动态库搜索和加载的路径；

/*****************************************************************************************/
/*****************************************************************************************/
问题：不使用默认路径的mesa。
方案一：
设置
export MESA_LOADER_DRIVER_OVERRIDE=radeonsi 
export LIBGL_DRIVERS_PATH=/home/loongson/zhangletest/mesa-apt/templib/usr/lib/loongarch64-linux-gnu/dri
export LD_LIBRARY_PATH=/home/loongson/zhangletest/mesa-apt/templib/usr/lib

可以 用 export 来检查 配置是否正确
启动后
gdb  info sharedlibrary 看当时使用的库的路径
或者 /proc/下面

ldd 只能看 程序启动的时候so，不能看到dlopen的

结果： 只能设置成功 radeonsi驱动。

检查mesa 代码，发现 
MESA_LOADER_DRIVER_OVERRIDE   和 LIBGL_DRIVERS_PATH
是mesa 使用的 环境变量

方案二：

x86 模式 观察 glmark2 正常运行的时候，使用的mesa的几个so文件
0x00007ffff6e37ec0  0x00007ffff6e9666e  Yes         /lib/x86_64-linux-gnu/libGLX_mesa.so.0
0x00007ffff6df5120  0x00007ffff6e00f63  Yes         /lib/x86_64-linux-gnu/libglapi.so.0
0x00007ffff564f900  0x00007ffff615a06c  Yes         /usr/lib/x86_64-linux-gnu/dri/radeonsi_dri.so

radeonsi_dri.so 的打开模式已经知道
那么另外两个库是怎么打开的呢
/************************************/
从glmark2开始调查 使用so的过程
1. ldd 观察, mesa库的路径在ldd中看到，那就是通过dlopen来的/

2.查看glmark2的代码
glmark2 调用mesa 库,是通过打开库文件
dlopen  libGL.so  或者 libGL.so.1
/************************************/
在x86上面，研究 libGL.so  或者 libGL.so.1
zhangle@debian:~/zhangletest/mesa-18-3-6/mesa-18.3.6/debian/libgl1-mesa-dri$ ls -al /usr/lib/x86_64-linux-gnu/libGL.so
lrwxrwxrwx 1 root root 14 Aug 10  2018 /usr/lib/x86_64-linux-gnu/libGL.so -> libGL.so.1.7.0

zhangle@debian:~/zhangletest/mesa-18-3-6/mesa-18.3.6/debian/libgl1-mesa-dri$ dpkg-query  -S  libGL.so.1.7
libgl1:amd64: /usr/lib/x86_64-linux-gnu/libGL.so.1.7.0

发现mesa 之上,有个分发层.是libglvnd-1.1.0 ，编译出来的包有   libGL.so  或者 libGL.so.1
调查二

然后dlopen  设置断点.调查
第一步是  dlopen   libGL.so /*glmark2中*/
第二步是  dlopen   libGLX_mesa.so.0 //mesa库  /*libGL.so 中*/
第三步是  dlopen   radeonsi_dri.so  /*libGLX_mesa.so.0 mesa 中*/

第二步的bt，我们是这里没加载成功。
(gdb) bt
#0  __dlopen (file=file@entry=0x5555556abfa0 "libGLX_mesa.so.0", mode=mode@entry=1) at dlopen.c:75
#1  0x00007ffff7188b7d in __glXLookupVendorByName (vendorName=0x5555556a9b30 "mesa") at ../../../src/GLX/libglxmapping.c:430
#2  0x00007ffff7189f58 in __glXLookupVendorByScreen (dpy=dpy@entry=0x5555556930c0, screen=screen@entry=0) at ../../../src/GLX/libglxmapping.c:574
#3  0x00007ffff7189ffc in __glXLookupVendorByScreen (screen=0, dpy=0x5555556930c0) at ../../../src/GLX/libglxmapping.c:608
#4  __glXGetDynDispatch (dpy=dpy@entry=0x7fffffffe260, screen=screen@entry=-7616) at ../../../src/GLX/libglxmapping.c:608
#5  0x00007ffff7183760 in glXQueryExtensionsString (dpy=0x7fffffffe260, screen=-7616) at ../../../src/GLX/libglx.c:1477
#6  0x0000555555579bff in glad_glx_has_extension ()
#7  0x0000555555579cde in glad_glx_find_extensions ()
#8  0x0000555555579f45 in gladLoadGLXUserPtr ()
#9  0x0000555555573795 in GLStateGLX::init_display (native_display=<optimized out>, visual_config=..., this=0x7fffffffe2b0) at ../src/gl-state-glx.cpp:44
#10 GLStateGLX::init_display (this=this@entry=0x7fffffffe2b0, native_display=<optimized out>, visual_config=...) at ../src/gl-state-glx.cpp:34
#11 0x0000555555571ae8 in CanvasGeneric::init (this=0x7fffffffe300) at ../src/canvas-generic.cpp:43
#12 CanvasGeneric::init (this=0x7fffffffe300) at ../src/canvas-generic.cpp:38
#13 0x000055555556f45b in main (argc=<optimized out>, argv=<optimized out>) at ../src/main.cpp:205
(gdb) info symbol glXQueryExtensionsString
glXQueryExtensionsString in section .text of /lib/x86_64-linux-gnu/libGLX.so.0


发现第二步是  dlopen   libGLX_mesa.so.0 //mesa库  /*libGL.so 中*/ 是相对路径
读 libglvnd-1.1.0 代码也是这样。

在longarch上面设置
设置  export  LD_LIBRARY_PATH=/home/loongson/zhangletest/mesa-apt/templib/usr/lib/loongarch64-linux-gnu

成功,发现必须设置到so文件上一级才行.

/*****************************************************************************************/
附录一：testvbo.cpp
#define GL_GLEXT_PROTOTYPES


#include <vector>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <utility>
#include <time.h>
#include <X11/Xlib.h>
#include <X11/keysym.h>
#include <GL/gl.h>
#include <GL/glext.h>
#include <GL/glx.h>
#include <GL/glxext.h>

//typedef unsigned long long u_int64_t;
// vertices --> vertex_arrays_[0] -> vbo

std::vector<std::vector<float> > vertices_;
//std::vector<float 代表一个顶点的结构体
int vertex_size_ = 12; /*顶点的数组vertices__的每个顶点的浮点数 个数*/

std::vector<float *> vertex_arrays_;
/*拷贝的中间数组，interleave模式是1个元素*/

std::vector<GLuint> vbos_;
/*存放vbo的index的全局变量*/

#define  VBOUpdateMethodMap  0
#define  VBOUpdateMethodSubData 1
//int vbo_update_method_ = VBOUpdateMethodMap;

int vbo_update_method_ = 0;

u_int64_t get_timestamp_us()
{
    struct timespec ts;
	  clock_gettime(CLOCK_MONOTONIC, &ts);
    u_int64_t now = static_cast<u_int64_t>(ts.tv_sec) * 1000000 +
                   static_cast<double>(ts.tv_nsec)/1000.0;
    return now;
}


void make_grid(int n_x, int n_y)
{
    for (int i = 0; i < n_x; i++) {
        for (int j = 0; j < n_y; j++) {
             for (int n = 0; n < 6; n++) {
                 std::vector<float>  vertice_local(vertex_size_);
                 vertice_local[0] = i;
                 vertice_local[1] = j;
                 vertice_local[2] = n;
                 vertices_.push_back(vertice_local);
             }
        }
    }
}


void
update_single_array(const std::vector<std::pair<size_t, size_t> >& ranges,
                          size_t n, size_t nfloats, size_t offset)
/*size_t n = 0*/
/* update_single_array(ranges, 0, vertex_size_, 0);*/
{
    float *array(vertex_arrays_[n]);

    /* Update supplied ranges */
    for (std::vector<std::pair<size_t, size_t> >::const_iterator ri = ranges.begin();
         ri != ranges.end();
         ri++)
    {
        /* Update the current range from the vertex data */
        float *dest(array + nfloats * ri->first);
        for (size_t n = ri->first; n <= ri->second; n++) {
       /*一个个顶点的拷贝，n代表哪个顶点开始*/
            float *src(vertices_[n].data() + offset);
            std::copy(src, src + nfloats, dest);
            dest += nfloats;
        }

    }
}

void
update_single_array_2(const std::vector<std::pair<size_t, size_t> >& ranges,
                          size_t n, size_t nfloats, size_t offset)
/*size_t n = 0*/
/* update_single_array(ranges, 0, vertex_size_, 0);*/
{
    float *array(vertex_arrays_[n]);

    /* Update supplied ranges */
    for (std::vector<std::pair<size_t, size_t> >::const_iterator ri = ranges.begin();
         ri != ranges.end();
         ri++)
    {

        float *src(vertices_[0].data() + nfloats * ri->first);
        float *src_end(vertices_[0].data() + nfloats * (ri->second + 1));
        float *dest(array + nfloats * ri->first);
        std::copy(src, src_end, dest);
   #if  0     
        /* Update the current range from the vertex data */
        float *dest(array + nfloats * ri->first);
        for (size_t n = ri->first; n <= ri->second; n++) {
       /*一个个顶点的拷贝，n代表哪个顶点开始*/
            float *src(vertices_[n].data() + offset);
            std::copy(src, src + nfloats, dest);
            dest += nfloats;
        }
   #endif 

    }
}


void build_vbo()
{
    int nvertices = vertices_.size();
    GLuint vbo;
     /* Create a single vbo to store all attribute data */
    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);

    glBufferData(GL_ARRAY_BUFFER, nvertices * vertex_size_ * sizeof(float),
                   vertex_arrays_[0], GL_STATIC_DRAW);

    glBindBuffer(GL_ARRAY_BUFFER, 0);

    //for (size_t i = 0; i < vertex_format_.size(); i++) {
    
    for (size_t i = 0; i < 4; i++) {
        vbos_.push_back(vbo);
    }
    //vertex_stride_ = vertex_size_ * sizeof(float);
}

void update_single_vbo(const std::vector<std::pair<size_t, size_t> >& ranges,
                        size_t n, size_t nfloats)
{
    float *src_start(vertex_arrays_[n]);
    float *dest_start(0);

    glBindBuffer(GL_ARRAY_BUFFER, vbos_[n]);

    if (vbo_update_method_ == VBOUpdateMethodMap) {
        dest_start = reinterpret_cast<float *>(
                glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY)
                );
    }

    /* Update supplied ranges */
    for (std::vector<std::pair<size_t, size_t> >::const_iterator iter = ranges.begin();
         iter != ranges.end();
         iter++)
    {
        float *src(src_start + nfloats * iter->first);
        float *src_end(src_start + nfloats * (iter->second + 1));

        if (vbo_update_method_ == VBOUpdateMethodMap) {
            float *dest(dest_start + nfloats * iter->first);
            std::copy(src, src_end, dest);
        }
        else if (vbo_update_method_ == VBOUpdateMethodSubData) {
            glBufferSubData(GL_ARRAY_BUFFER, nfloats * iter->first * sizeof(float),
                            (src_end - src) * sizeof(float), src);
        }
    }

    if (vbo_update_method_ == VBOUpdateMethodMap)
        glUnmapBuffer(GL_ARRAY_BUFFER);
}


void update_vbo(const std::vector<std::pair<size_t, size_t> >& ranges)
{
    update_single_vbo(ranges, 0, vertex_size_);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
}

/***********************************************************************************/
   char *dpyName = NULL;
   Display *dpy;
   int scrnum;
   Window win;
   GLXContext ctx;
/***********************************************************************************/
int make_window( int x, int y, int width, int height)
{
    dpy = XOpenDisplay(dpyName);
    if (!dpy) {
        printf("Error: couldn't open display %s\n",
	     dpyName ? dpyName : getenv("DISPLAY"));
      return -1;
    }

    scrnum = DefaultScreen( dpy );

    Window root;
   root = RootWindow( dpy, scrnum );

   int attribs[64];
   int i=0;
   attribs[i++] = GLX_RGBA;
   attribs[i++] = GLX_DOUBLEBUFFER;
   attribs[i++] = GLX_RED_SIZE;
   attribs[i++] = 1;
   attribs[i++] = GLX_GREEN_SIZE;
   attribs[i++] = 1;
   attribs[i++] = GLX_BLUE_SIZE;
   attribs[i++] = 1;
   attribs[i++] = GLX_DEPTH_SIZE;
   attribs[i++] = 1;
   attribs[i++] = None;

   XVisualInfo *visinfo;
   visinfo = glXChooseVisual(dpy, scrnum, attribs);
   if (!visinfo) {
      printf("Error: couldn't get an RGB, Double-buffered");
      printf(" visual\n");
      exit(1);
   }

   XSetWindowAttributes attr;
   attr.background_pixel = 0;
   attr.border_pixel = 0;
   attr.colormap = XCreateColormap( dpy, root, visinfo->visual, AllocNone);
   attr.event_mask = StructureNotifyMask | ExposureMask | KeyPressMask;
   /* XXX this is a bad way to get a borderless window! */
   unsigned long mask;
   mask = CWBackPixel | CWBorderPixel | CWColormap | CWEventMask;


   win = XCreateWindow( dpy, root, x, y, width, height,
		        0, visinfo->depth, InputOutput,
		        visinfo->visual, mask, &attr );

   ctx = glXCreateContext(dpy, visinfo, NULL, True);
   if (!ctx) {
      printf("Error: glXCreateContext failed\n");
      exit(1);
   }
   return 0;

}



/***********************************************************************************/
int
main(int argc, char *argv[])
{
    u_int64_t start_time = 0, end_time = 0, elapsed_time;
    int count = 0;

    if(argc!=2){
		printf("Argument number is not correct!\n -copy-one-time or -copy-multi-time\n");
		return -1;
	}

    if(!memcmp(argv[1],"-help",sizeof("-help")))
    {
        printf ("-copy-one-time/n");
        printf ("-copy-multi-time/n");
        return 0;
    }

    int  copy = 0;
    if(!memcmp(argv[1],"-copy-one-time",sizeof("-copy-one-time")))
        {
        copy = 1;
	}
    else if(!memcmp(argv[1],"-copy-multi-time",sizeof("-copy-multi-time")))
        {
	    copy = 2;
        }
    if(copy == 0)
        copy =1; 


  //  printf ("the value of copy =%d \n",copy);
    
    make_grid(20, 200);

    int nvertices = vertices_.size();

    float *array = new float[nvertices * vertex_size_];

    vertex_arrays_.push_back(array);

    std::vector<std::pair<size_t, size_t> > ranges;
    ranges.push_back(std::pair<size_t, size_t>(0, 23999));

    if (copy == 1) {
        start_time =  get_timestamp_us();

        for(;count < 100000; count++) { 
            update_single_array_2(ranges, 0, vertex_size_, 0);
        }   
        end_time =   get_timestamp_us();

        elapsed_time  = (end_time - start_time)/count;
        printf ("copy the array at once elapsed_time = %d us\n",elapsed_time);
    }

    else if (copy == 2) {
        start_time =  get_timestamp_us();

        for(count = 0;count < 10000; count++) {
            update_single_array(ranges, 0, vertex_size_, 0);
        }
        end_time =   get_timestamp_us();

        elapsed_time  = (end_time - start_time)/count;
        printf ("copy the array multi times elapsed_time = %d us\n",elapsed_time);
    }


    make_window( 0, 0,800 ,600);


    glXMakeCurrent(dpy, win, ctx);


    build_vbo();


    start_time =  get_timestamp_us();
    
    for(count = 0;count < 1000; count++) { 
        update_vbo(ranges);
    }
    end_time =   get_timestamp_us();
    
    elapsed_time  = (end_time - start_time)/count;
  
    printf ("the vbo elapsed_time = %d us\n",elapsed_time);

    glDeleteBuffers(1, &vbos_[0]);
    vbos_.clear();

    delete [] vertex_arrays_[0];
    vertex_arrays_.clear();

    glXDestroyContext(dpy, ctx);
    XDestroyWindow(dpy, win);
    XCloseDisplay(dpy);

    return 0;
}
